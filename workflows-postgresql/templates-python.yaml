apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: postgres-wait-init
spec:
  entrypoint: wait-init
  templates:
  - name: wait-init   
    container:
      image: postgres
      envFrom:
      - secretRef:
          name: postgres-secret
      command: ['sh', '-c', 
          'until pg_isready -h $(POSTGRES_HOST) -d $(POSTGRES_DB) -p $(POSTGRES_PORT) -U $(POSTGRES_USER); 
          do echo waiting for database; sleep 2; done;']
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: fill-postgres-python
spec:
  entrypoint: fill-postgres
  arguments:
    parameters:
    - name: message
      value: |
        { "message": "hello" }
  templates:
  - name: fill-postgres
    inputs:
      parameters:
      - name: message   
    steps:
    - - name: wait-init
        templateRef:
          name: postgres-wait-init
          template: wait-init
    - - name: fill-table
        template: run-postgres
        arguments:
          parameters:
          - name: sql-create
            value: "CREATE TABLE IF NOT EXISTS messages (message VARCHAR(255));"
          - name: sql-insert
            value: "INSERT INTO messages (message) VALUES (%(message)s);"
          - name: sql-values
            value: "{{inputs.parameters.message}}"
        
  - name: run-postgres
    inputs:
      parameters:
      - name: sql-create
      - name: sql-insert    
      - name: sql-values 
    script: 
      image: ghcr.io/felpasl/python-psycopg2
      envFrom:
      - secretRef:
          name: postgres-secret
      command: [python]
      source: |
        import psycopg2
        import os
        p_user = os.getenv('POSTGRES_USER')
        p_password = os.getenv('POSTGRES_PASSWORD')
        p_host = os.getenv('POSTGRES_HOST')
        p_port = os.getenv('POSTGRES_PORT')
        p_db = os.getenv('POSTGRES_DB')
        conn_string = f"postgresql://{p_user}:{p_password}@{p_host}:{p_port}/{p_db}"
        conn = psycopg2.connect(conn_string)
        sql = "{{inputs.parameters.sql-create}}"
        cursor = conn.cursor()
        cursor.execute(sql)
        print(cursor.statusmessage)

        sql = "{{inputs.parameters.sql-insert}}"
        param = {{inputs.parameters.sql-values}}
        cursor.execute(sql, param)
        print(cursor.statusmessage)

        
        conn.commit()
        cursor.close()
        conn.close()

